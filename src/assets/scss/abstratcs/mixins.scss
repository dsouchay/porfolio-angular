@use "sass:math";
@use 'variables' as *;
@use 'functions' as *;

//media query mobile first
@mixin breakpoint($size) {
  @media (min-width: map-get($breakpoints-up, $size)) {
    @content;
  }
}
@mixin background-slinding($background-color){
  content: '';
  width: 100%;
  height: 100%;
  position: absolute;
  left: 0;
  top: 0;
  border-radius: 0;
  background-color: $background-color;
  opacity: .8;
  transition: all 1s ease;
  z-index: 0;
  animation: background-sliding-fade-in 1.2s cubic-bezier(0.550, 0.085, 0.680, 0.530) both, background-sliding-fade-out 2s ease-out both;
}
@mixin background-sliding-animation(){
  @keyframes background-sliding-fade-in {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }
  @keyframes background-sliding-fade-out {
    0% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }

  }
}

//mixin grid system
@mixin grid-flex($breakpoints: null) {
  $bk: if($breakpoints == null, '', '-#{$breakpoints}');
  @for $i from 1 through 12 {
    .flex-col#{$bk}-#{$i} {
      padding-left: $gap;
      padding-right: $gap;
      width: math.div($i, 12) * 100%;
      flex: 0 0 auto;
    }

    .flex-col-#{$breakpoints}-offset-#{$i}{
      margin-left: math.div($i, 12) * 100%;
    }
  }
}

//mixin flex class
@mixin flex-class($breakpoints: null){
  $bk: if($breakpoints == null, '', '-#{$breakpoints}');
  @each $flex, $property in $flex-class{
    @each $class, $prop in $property{
      &-#{$class}#{$bk}{
        #{$flex}: unquote($prop) !important;
      }
    }
  }
}

//mixin margin or padding class
@mixin spacing-class($breakpoints: null){
  $bk: if($breakpoints == null, '', '-#{$breakpoints}');
  @for $i from 0 through (length($spacers) - 1){
    @each $spacer, $property in $spacing-class{
      @each $spacing, $prop in $property{
        .#{$spacer}#{$spacing}#{$bk}-#{$i}{
          #{$prop}: map-get($spacers, $i);
        }
      }
    }
  }
}

@mixin inputSearchStyles(){
  //input container
  .mat-form-field-flex{
    background: var(--color-gray-200);
  }
  .mat-form-field-infix{
    padding: 0;
  }
  //reset paddings
  .mat-form-field-wrapper{
    padding-bottom: 0;
    margin-top: 0;
  }

  //remove underline
  .mat-form-field-underline{
    width: 0;
    &:before{
      height: 0;
    }
  }

  //input container
  .mat-form-field-flex{
    align-items: center;
    padding: rem(12);
    max-height: rem(48);
    border-radius: rem(6);
    border: 1px solid var(--color-gray-200);
  }

  //input icon
  .mat-form-field-prefix{
    margin-right: rem(12);
  }
  //input text
  .mat-form-field-infix{
    border-top: 0;
    padding: 0;
    font-size: rem(16);
    width: 100%;
    color: var(--color-gray-600);
  }

  //reset paddings
  .mat-form-field-label-wrapper{
    top: -.5em;
    padding-top: 0;
  }

  .mat-focused{
    .mat-form-field-flex{
      border: 1px solid var(--color-primary-800);
    }
    .mat-form-field-infix{
      padding-top: 0;
    }
    .mat-form-field-label{
      padding-top: rem(5);
    }
  }
}
@mixin degradado($start, $end) {
  background: $start;  /* fallback for old browsers */
  background: -webkit-linear-gradient(to top, $start, $end);  /* Chrome 10-25, Safari 5.1-6 */
  background: linear-gradient(to top, $start, $end ); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
}
@mixin resetHPadding($value) {
  @for $i from 1 to 6 {
    h#{$i}{ margin: $value; }
  }
}
@mixin setHValue($elem, $value) {
  @for $i from 1 to 6 {
    h#{$i}{ #{$elem}: $value; }
  }
}
